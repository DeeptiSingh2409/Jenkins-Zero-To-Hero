pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-docker-agent:latest'  // This must have Docker CLI installed
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://172.166.178.227:9000"
    GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    GIT_USER_NAME = "DeeptiSingh2409"
    DOCKER_IMAGE = "deepti2409/ultimate-cicd:${BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build and Test') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'mvn clean package'
        }
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
            sh '''
              mvn sonar:sonar \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.host.url=$SONAR_URL
            '''
          }
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          script {
            sh 'docker build -t $DOCKER_IMAGE .'
            def dockerImage = docker.image("$DOCKER_IMAGE")
            docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
              dockerImage.push()
            }
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "thedeeptisingh@gmail.com"
            git config user.name "DeeptiSingh2409"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }

  post {
    success {
      echo "✅ Pipeline completed successfully."
    }
    failure {
      echo "❌ Pipeline failed in stage: ${env.STAGE_NAME}"
    }
  }
}
